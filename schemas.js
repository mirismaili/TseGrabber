import sequelize from 'sequelize'

const {
	DataTypes: {STRING, INTEGER, BIGINT, REAL, SMALLINT},
} = sequelize

const majorShareholdersSchema = {
	z0: INTEGER,
	coIsin12: STRING,
	stocks: BIGINT,
	percent: REAL,
	changeDirection: STRING,
	shareholderName: STRING,
	insCode: BIGINT,
	date: INTEGER,
}

export const infoGroups = {
	BasicData: {
		searchPhrase: '<script>var InstSimpleData=',
		regex: /<script>var InstSimpleData=(\[.*?]);/,
		regex3: /^\[(?:'[-\p{L} \d\u200C]+?',){4}\d,'\w\d',(?:'IR\w{10}',){2}\d+?,\d+?\]$/u,
		schema: {
			name: STRING,
			symbol: STRING,
			market1: STRING,
			subMarket: STRING,
			marketCode: INTEGER,
			x7: STRING,
			coIsin12: STRING,
			isin12: STRING,
			totalStocks: BIGINT,
			baseBol: BIGINT,
			insCode: BIGINT,
			date: INTEGER,
		},
		uniques: ['insCode', 'date'],
	},
	PriceThresholds: {
		searchPhrase: '<script>var StaticTreshholdData=[',
		regex: /<script>var StaticTreshholdData=(\[.*?]);/,
		regex3: /^\[(?:'[-\p{L} \d\u200C]+?',){4}\d,'\w\d',(?:'IR\w{10}',){2}\d+?,\d+?\]$/u,
		schema: {
			dayTime: INTEGER,
			upperBound: INTEGER,
			lowerBound: INTEGER,
			insCode: BIGINT,
			date: INTEGER,
		},
		uniques: ['insCode', 'date', 'dayTime'],
	},
	Prices: {
		searchPhrase: '\r\nvar ClosingPriceData=[',
		regex: /^var ClosingPriceData=(\[.*?]);/m,
		regex3: /^\[(?:\['\d{4}(?:\/\d{1,2}){2} \d\d:\d\d:\d\d','[-\w]*?'(?:,'\d+?'){11}],?)+?]$/,
		schema: {
			dateTime: STRING,
			x1: STRING,
			latest: INTEGER,
			final: INTEGER,
			first: INTEGER,
			yesterday: INTEGER,
			highest: INTEGER,
			lowest: INTEGER,
			tradesCount: INTEGER,
			tradesVolume: BIGINT,
			tradesValue: BIGINT,
			x2: STRING,
			dayTime: INTEGER,
			insCode: BIGINT,
			date: INTEGER,
		},
		uniques: ['insCode', 'date', 'dayTime', 'tradesCount'],  // Actually 'dayTime' isn't needed. Just added for
																					// indexing.
	},
	// IntraDayPrices: {regex: /^var IntraDayPriceData=(\[\[.+?]]);/m, schema: },
	State: {
		searchPhrase: '\r\nvar InstrumentStateData=[',
		regex: /^var InstrumentStateData=(\[.*?]);/m,
		regex3: /^\[(?:\[\d{8},\d+,'\w[\w\s]'],?)+?]$/,
		schema: {
			fromDate: INTEGER,
			dayTime: INTEGER,
			state: STRING,
			insCode: BIGINT,
			date: INTEGER,
		},
		uniques: ['insCode', 'date', 'fromDate', 'dayTime'],
	},
	Trades: {
		searchPhrase: '\r\nvar IntraTradeData=[',
		regex: /^var IntraTradeData=(\[.*?]);/m,
		regex3: /^\[(?:\['\d+','\d\d:\d\d:\d\d'(?:,'\d+?'){2},\d+?],?)+?]$/,
		schema: {
			sequence: INTEGER,
			dayTime: STRING,
			volume: INTEGER,
			price: INTEGER,
			y: INTEGER,
			insCode: BIGINT,
			date: INTEGER,
		},
		uniques: ['insCode', 'date', 'dayTime', 'sequence'],  // Actually 'dayTime' isn't needed. Just added for indexing.
	},
	MajorShareholders: {
		searchPhrase: '\r\nvar ShareHolderData=[',
		regex: /^var ShareHolderData=(\[.*?]);/m,
		regex3: /^\[(?:\[\d+,'IR\w{10}',\d+,\d+?(?:\.\d+?)?,'(:?ArrowUp|ArrowDown|)','[-\p{L} .\u{200C}]+?'\],?)+?\]$/u,
		schema: majorShareholdersSchema,
		uniques: ['insCode', 'date', 'z0'],
	},
	MajorShareholdersYesterday: {
		searchPhrase: '\r\nvar ShareHolderDataYesterday=[',
		regex: /^var ShareHolderDataYesterday=(\[.*?]);/m,
		regex3: /^\[(?:\[\d+,'IR\w{10}',\d+,\d+?(?:\.\d+?)?,'(:?ArrowUp|ArrowDown|)','[-\p{L} .\u{200C}]+?'\],?)+?\]$/u,
		schema: majorShareholdersSchema,
		uniques: ['insCode', 'date', 'z0'],
	},
	BuyerSellerInfo: {
		searchPhrase: '\r\nvar ClientTypeData=',
		regex: /^var ClientTypeData=(\[.*?]);/m,
		regex3: /^\[(?:\d+?,){16}(?:\d+?(?:\.\d+?)?,){4}-?\d+?]$/,
		schema: {
			buyRealCount: INTEGER,
			buyLegalCount: INTEGER,
			sellRealCount: INTEGER,
			sellLegalCount: INTEGER,
			buyRealVolume: BIGINT,
			buyLegalVolume: BIGINT,
			sellRealVolume: BIGINT,
			sellLegalVolume: BIGINT,
			buyRealPercent: REAL,
			buyLegalPercent: REAL,
			sellRealPercent: REAL,
			sellLegalPercent: REAL,
			buyRealValue: BIGINT,
			buyLegalValue: BIGINT,
			sellRealValue: BIGINT,
			sellLegalValue: BIGINT,
			buyRealMeanPrice: REAL,
			buyLegalMeanPrice: REAL,
			sellRealMeanPrice: REAL,
			sellLegalMeanPrice: REAL,
			ownershipTransferToReal: BIGINT,
			insCode: BIGINT,
			date: INTEGER,
		},
		uniques: ['insCode', 'date'],
	},
	Orders: {
		searchPhrase: '<script>var BestLimitData=[',
		regex: /(\[.*?]);/,
		regex3: /^\[(?:\[\d{5,6},'[1-5]','\d{1,4}'(?:,'\d+?'){4},'\d{1,4}'],?)+?]$/,
		schema: {
			dayTime: INTEGER,
			line: SMALLINT,
			bidCount: SMALLINT,
			bidVolume: BIGINT,
			bidPrice: INTEGER,
			askPrice: INTEGER,
			askVolume: BIGINT,
			askCount: SMALLINT,
			insCode: BIGINT,
			date: INTEGER,
		},
		// Unfortunately there isn't any deterministic unique sequence logically, so we need to add all fields:
		uniques: [
			'insCode', 'date', 'dayTime',
			'line', 'bidPrice', 'askPrice', 'bidVolume', 'askVolume', 'bidCount', 'askCount',
		],
	},
}
